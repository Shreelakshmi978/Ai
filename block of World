from collections import deque 
 
 class State:     
        def __init__(self, stacks): 
            self.stacks = stacks 
 
      def __str__(self):        
            return str(self.stacks) 
 
      def is_goal(self, goal):        
            return self.stacks == goal.stacks 
 
      def get_possible_moves(self): 
            moves = []         
               for i, stack in enumerate(self.stacks):              
                      if stack: 
                     top_block = stack[-1]                
                  for j, other_stack in enumerate(self.stacks):                       
                        if i != j: 
                        new_stacks = [s[:] for s in self.stacks]                          
                        new_stacks[i] = new_stacks[i][:-1]                         
                        new_stacks[j].append(top_block) 
                    moves.append((State(new_stacks), f'Move {top_block} from stack {i} to stack {j}'))        
            return moves 
 
 def bfs(initial_state, goal_state): 
     queue = deque([(initial_state, [])])   
      visited 
