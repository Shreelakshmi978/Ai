import math

HUMAN = 'O'  
AI = 'X'     # AI player

def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

def is_moves_left(board):
    for row in board:
        if '_' in row:
            return True
    return False

def evaluate(board):
    # Check rows for victory
    for row in board:
        if row[0] == row[1] == row[2]:
            if row[0] == AI:
                return 10
            elif row[0] == HUMAN:
                return -10
    
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col]:
            if board[0][col] == AI:
                return 10
            elif board[0][col] == HUMAN:
                return -10

      if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == AI:
            return 10
        elif board[0][0] == HUMAN:
            return -10

    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == AI:
            return 10
        elif board[0][2] == HUMAN:
            return -10

    return 0

def minimax(board, depth, is_max):
    score = evaluate(board)

   
    if score == 10:
        return score - depth  # Subtract depth to prefer quicker wins
    if score == -10:
        return score + depth  # Add depth to delay losses

    if not is_moves_left(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = AI
                    best = max(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = '_'
        return best

    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = HUMAN
                    best = min(best, minimax(board, depth + 1, not is_max))
                    board[i][j] = '_'
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = AI
                move_val = minimax(board, 0, False)
                # Undo the move
                board[i][j] = '_'
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def play_game():
    board = [
        ['_', '_', '_'],
        ['_', '_', '_'],
        ['_', '_', '_']
    ]

    print("Initial board:")
    print_board(board)

    while is_moves_left(board) and evaluate(board) == 0:
        # Human player's turn
        num = int(input("Enter position (1-9) to place your 'O': ")) - 1
        row = num // 3
        col = num % 3
        if board[row][col] == '_':
            board[row][col] = HUMAN
            print("\nBoard after Human's move:")
            print_board(board)
        else:
            print("Invalid move! Try again.")
            continue

        if evaluate(board) != 0 or not is_moves_left(board):
            break
            
        print("================================================================")
        print("\nAI is making a move...")
        best_move = find_best_move(board)
        board[best_move[0]][best_move[1]] = AI
        print("\nBoard after AI's move:")
        print_board(board)
        print("=================================================================")

    score = evaluate(board)
    if score == 10:
        print("AI wins!")
    elif score == -10:
        print("Human wins!")
    else:
        print("It's a draw!")

if __name__ == "__main__":
    play_game()
